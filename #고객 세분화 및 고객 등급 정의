# 고객 세분화 및 고객 등급 정의 및 리탠션 분석 코드 입니다.
# 참고 개념 
- **롤링 리텐션(Rolling Retention)**: 특정 기준일에 가입한 사용자 중, 특정 날짜까지 **한 번이라도** 재방문한 비율.
- **클래식 리텐션(Classic Retention)**: 특정 기준일(예: 첫 구매일)에 가입한 사용자 중, 이후 특정 기간(예: N일, N주, N개월) 후에도 활동을 유지한 비율.

#최근 1년간 주문액
SELECT 
    price_usd 
FROM orders 
WHERE created_at BETWEEN '2014-03-19' AND '2015-03-19';

#최근 3년간 주문액
SELECT 
    price_usd 
FROM orders 
WHERE created_at BETWEEN '2012-03-19' AND '2015-03-19';

---
# 전체고객 및 VIP 그룹의 리텐션 분석(롤링리텐션)
# 전체고객 rolling retention
WITH firstlast_order AS (
	SELECT DISTINCT user_id, min(created_at) AS first_ord_date, max(created_at) AS last_ord_date
	FROM orders
	GROUP BY user_id
	),
user_od AS(
	SELECT o.user_id
	, DATE_FORMAT(fo.first_ord_date,'%Y-%m-01')AS first_order_month
	, DATE_FORMAT(fo.last_ord_date,'%Y-%m-01')AS last_order_month
  FROM firstlast_order fo
  LEFT JOIN orders o ON o.user_id = fo.user_id
)
SELECT first_order_month
		, COUNT(DISTINCT user_id) AS month0
	    , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 1 MONTH) <= last_order_month THEN user_id END) AS month1
	    , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 2 MONTH) <= last_order_month THEN user_id END) AS month2
	    , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 3 MONTH) <= last_order_month THEN user_id END) AS month3
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 4 MONTH) <= last_order_month THEN user_id END) AS month4
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 5 MONTH) <= last_order_month  THEN user_id END) AS month5
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 6 MONTH) <= last_order_month  THEN user_id END) AS month6
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 7 MONTH) <= last_order_month  THEN user_id END) AS month7
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 8 MONTH) <= last_order_month  THEN user_id END) AS month8
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 9 MONTH) <= last_order_month  THEN user_id  END) AS month9
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 10 MONTH) <= last_order_month  THEN user_id END) AS month10
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 11 MONTH) <= last_order_month THEN user_id END) AS month11
FROM user_od
GROUP BY first_order_month ORDER BY first_order_month ;

---
# 전체 고객 및 VIP 그룹의 리텐션 분석(클래식리텐션) 
# VIP rolling retention
WITH Avg_price AS (
    SELECT AVG(total_purchase) AS avg_price
    FROM (
        SELECT user_id, SUM(price_usd) AS total_purchase
        FROM orders
        GROUP BY user_id
    ) AS user_purchase
),
VIP AS (
    SELECT o.user_id, SUM(o.price_usd) AS total_purchase, a.avg_price
    FROM orders o
    CROSS JOIN Avg_price a
    GROUP BY o.user_id, a.avg_price
    HAVING SUM(o.price_usd) >= 1.5 * a.avg_price
),
firstlast_order AS (
	SELECT DISTINCT user_id, min(created_at) AS first_ord_date, max(created_at) AS last_ord_date
	FROM orders
	WHERE user_id IN(SELECT user_id FROM VIP)
	GROUP BY user_id
	),
user_od AS(
	SELECT o.user_id
	, DATE_FORMAT(fo.first_ord_date,'%Y-%m-01')AS first_order_month
	, DATE_FORMAT(fo.last_ord_date,'%Y-%m-01')AS last_order_month
  FROM firstlast_order fo
  LEFT JOIN orders o ON o.user_id = fo.user_id
)
SELECT first_order_month
		 , COUNT(DISTINCT user_id) AS month0
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 1 MONTH) <= last_order_month THEN user_id END) AS month1
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 2 MONTH) <= last_order_month THEN user_id END) AS month2
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 3 MONTH) <= last_order_month THEN user_id END) AS month3
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 4 MONTH) <= last_order_month THEN user_id END) AS month4
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 5 MONTH) <= last_order_month  THEN user_id END) AS month5
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 6 MONTH) <= last_order_month  THEN user_id END) AS month6
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 7 MONTH) <= last_order_month  THEN user_id END) AS month7
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 8 MONTH) <= last_order_month  THEN user_id END) AS month8
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 9 MONTH) <= last_order_month  THEN user_id  END) AS month9
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 10 MONTH) <= last_order_month  THEN user_id END) AS month10
	     , COUNT(DISTINCT CASE WHEN DATE_ADD(first_order_month, INTERVAL 11 MONTH) <= last_order_month THEN user_id END) AS month11
FROM user_od
GROUP BY first_order_month ORDER BY first_order_month ;

# 유저별 최초 주문일 검색 테이블
WITH Avg_price AS (
    SELECT AVG(total_purchase) AS avg_price
    FROM (
        SELECT user_id, SUM(price_usd) AS total_purchase
        FROM orders
        GROUP BY user_id
    ) AS user_purchase
),
VIP AS (
    SELECT o.user_id, SUM(o.price_usd) AS total_purchase, a.avg_price
    FROM orders o
    CROSS JOIN Avg_price a
    GROUP BY o.user_id, a.avg_price
    HAVING SUM(o.price_usd) >= 1.5 * a.avg_price
),

first_order AS (
	SELECT DISTINCT user_id,
			CASE WHEN user_id IN (SELECT user_id
								FROM vip) THEN 'VIP'
			ELSE 'Regular' END AS 'User_Segment', min(created_at) AS first_ord
	FROM orders
	GROUP BY 1
),

# 첫 주문 이후 n개월 주문 여부
order_month AS (SELECT DISTINCT fo.user_id, User_segment,
		CASE WHEN created_at = date_format( date_format( first_ord, '%Y-%m-01'), '%Y-%m-01') THEN 0
		WHEN created_at > date_format( date_format( first_ord, '%Y-%m-01'), '%Y-%m-01') AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 1 month) THEN 1
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 1 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 2 month) THEN 2
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 2 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 3 month) THEN 3
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 3 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 4 month) THEN 4
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 4 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 5 month) THEN 5
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 5 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 6 month) THEN 6
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 6 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 7 month) THEN 7
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 7 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 8 month) THEN 8
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 8 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 9 month) THEN 9
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 9 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 10 month) THEN 10
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 10 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 11 month) THEN 11
		WHEN created_at > date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 11 month) AND created_at <= date_add(date_format( first_ord, '%Y-%m-01'), INTERVAL 12 month) THEN 12
		END AS month_num

FROM first_order fo JOIN orders o ON fo.user_id = o.user_id
ORDER BY month_num desc
),

# 추가 주문 순서
seq_table AS (
	SELECT user_id, User_segment, month_num
			FROM order_month
)

SELECT User_segment,
		CASE WHEN month_num = 0 THEN 'm-0'
		WHEN month_num = 1  THEN 'm-1'
		WHEN month_num = 2  THEN 'm-2'
		WHEN month_num = 3  THEN 'm-3'
		WHEN month_num = 4  THEN 'm-4'
		WHEN month_num = 5  THEN 'm-5'
		WHEN month_num = 6  THEN 'm-6'
		WHEN month_num = 7  THEN 'm-7'
		WHEN month_num = 8  THEN 'm-8'
		WHEN month_num = 9  THEN 'm-9'
		WHEN month_num = 10 THEN 'm-10'
		WHEN month_num = 11 THEN 'm-11'
		WHEN month_num = 12 THEN 'm-12'
		ELSE 'unknown'
		END AS month_range,
		count(user_id) user_cnt
FROM seq_table
GROUP BY 1,2
ORDER BY 1,2;
